import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:hive/hive.dart';
import 'package:meprop_asset_tracker/utils/parameters.dart';

/// Service centralis√© pour la gestion optimis√©e du cache avec fallback automatique
class CacheService {
  static final CacheService _instance = CacheService._internal();
  factory CacheService() => _instance;
  CacheService._internal();

  late Box _box;

  /// Initialise le service de cache
  Future<void> initialize() async {
    _box = Hive.box('realTokens');
  }

  /// M√©thode g√©n√©rique pour fetch avec cache optimis√© et fallback automatique
  Future<List<Map<String, dynamic>>> fetchWithCache({
    required String cacheKey,
    required Future<List<dynamic>> Function() apiCall,
    required String debugName,
    bool forceFetch = false,
    String? alternativeCacheKey,
  }) async {
    final DateTime now = DateTime.now();
    final lastFetchTime = _box.get('lastFetchTime_$cacheKey');

    // 1. Toujours charger le cache en premier si disponible
    List<Map<String, dynamic>> cachedData = [];
    try {
      String? cachedJson = _box.get(cacheKey);

      // Essayer la cl√© alternative si la principale est vide
      if (cachedJson == null && alternativeCacheKey != null) {
        cachedJson = _box.get(alternativeCacheKey);
      }

      if (cachedJson != null) {
        cachedData = List<Map<String, dynamic>>.from(json.decode(cachedJson));
        debugPrint("üîµ Cache $debugName charg√©: ${cachedData.length} √©l√©ments");
      }
    } catch (e) {
      debugPrint("‚ö†Ô∏è Erreur chargement cache $debugName: $e");
    }

    // 2. V√©rifier si une mise √† jour est n√©cessaire
    bool needsUpdate = forceFetch;
    if (!needsUpdate && lastFetchTime != null) {
      final DateTime lastFetch = DateTime.parse(lastFetchTime);
      needsUpdate = now.difference(lastFetch) >= Parameters.apiCacheDuration;
    } else if (lastFetchTime == null) {
      needsUpdate = true;
    }

    // 3. Si pas besoin de mise √† jour et cache disponible, retourner le cache
    if (!needsUpdate && cachedData.isNotEmpty) {
      debugPrint("‚úÖ Cache $debugName valide utilis√©");
      return cachedData;
    }

    // 4. Tentative de mise √† jour via API
    try {
      debugPrint("üîÑ Mise √† jour API $debugName...");
      final apiResult = await apiCall();

      if (apiResult.isNotEmpty) {
        // Sauvegarder le nouveau cache
        final newData = List<Map<String, dynamic>>.from(apiResult);
        await _box.put(cacheKey, json.encode(newData));
        await _box.put('lastFetchTime_$cacheKey', now.toIso8601String());
        debugPrint("üíæ $debugName mis √† jour: ${newData.length} √©l√©ments");
        return newData;
      } else {
        debugPrint("‚ö†Ô∏è API $debugName retourn√©e vide");
      }
    } catch (e) {
      debugPrint("‚ùå Erreur API $debugName: $e");
    }

    // 5. Fallback sur le cache si disponible
    if (cachedData.isNotEmpty) {
      debugPrint("üîÑ Utilisation du cache $debugName suite √† erreur API");
      return cachedData;
    }

    // 6. Dernier recours : liste vide
    debugPrint("‚ùå Aucune donn√©e disponible pour $debugName");
    return [];
  }

  /// M√©thode pour fetch avec callback de mise √† jour imm√©diate du cache
  Future<void> fetchWithCacheAndCallback({
    required String cacheKey,
    required Future<List<dynamic>> Function() apiCall,
    required void Function(List<Map<String, dynamic>>) onDataUpdated,
    required String debugName,
    bool forceFetch = false,
    String? alternativeCacheKey,
  }) async {
    final DateTime now = DateTime.now();
    final lastFetchTime = _box.get('lastFetchTime_$cacheKey');

    // 1. Charger et notifier imm√©diatement avec le cache si disponible
    List<Map<String, dynamic>> cachedData = [];
    try {
      String? cachedJson = _box.get(cacheKey);

      if (cachedJson == null && alternativeCacheKey != null) {
        cachedJson = _box.get(alternativeCacheKey);
      }

      if (cachedJson != null) {
        cachedData = List<Map<String, dynamic>>.from(json.decode(cachedJson));
        onDataUpdated(cachedData); // Notification imm√©diate pour l'UI
        debugPrint("üîµ Cache $debugName restaur√© et notifi√©: ${cachedData.length} √©l√©ments");
      }
    } catch (e) {
      debugPrint("‚ö†Ô∏è Erreur chargement cache $debugName: $e");
    }

    // 2. V√©rifier si une mise √† jour est n√©cessaire
    bool needsUpdate = forceFetch;
    if (!needsUpdate && lastFetchTime != null) {
      final DateTime lastFetch = DateTime.parse(lastFetchTime);
      needsUpdate = now.difference(lastFetch) >= Parameters.apiCacheDuration;
    } else if (lastFetchTime == null) {
      needsUpdate = true;
    }

    if (!needsUpdate && cachedData.isNotEmpty) {
      debugPrint("‚úÖ Cache $debugName valide, pas de mise √† jour n√©cessaire");
      return;
    }

    // 3. Mise √† jour en arri√®re-plan si n√©cessaire
    try {
      debugPrint("üîÑ Mise √† jour API $debugName en arri√®re-plan...");
      final apiResult = await apiCall();

      if (apiResult.isNotEmpty) {
        final newData = List<Map<String, dynamic>>.from(apiResult);

        // V√©rifier si les donn√©es ont chang√© avant de notifier
        if (!_areDataListsEqual(cachedData, newData)) {
          await _box.put(cacheKey, json.encode(newData));
          await _box.put('lastFetchTime_$cacheKey', now.toIso8601String());
          onDataUpdated(newData); // Notification avec les nouvelles donn√©es
          debugPrint("üíæ $debugName mis √† jour et notifi√©: ${newData.length} √©l√©ments");
        } else {
          // Mettre √† jour le timestamp m√™me si les donn√©es sont identiques
          await _box.put('lastFetchTime_$cacheKey', now.toIso8601String());
          debugPrint("üìä $debugName inchang√©, timestamp mis √† jour");
        }
      } else {
        debugPrint("‚ö†Ô∏è API $debugName retourn√©e vide, conservation du cache");
      }
    } catch (e) {
      debugPrint("‚ùå Erreur API $debugName: $e");

      // En cas d'erreur, s'assurer que les donn√©es du cache sont notifi√©es
      if (cachedData.isEmpty) {
        try {
          String? cachedJson = _box.get(cacheKey);
          if (cachedJson != null) {
            var fallbackData = List<Map<String, dynamic>>.from(json.decode(cachedJson));
            onDataUpdated(fallbackData);
            debugPrint("üîÑ Fallback cache $debugName notifi√©: ${fallbackData.length} √©l√©ments");
          }
        } catch (cacheError) {
          debugPrint("‚ùå Erreur fallback cache $debugName: $cacheError");
        }
      }
    }
  }

  /// Compare deux listes de donn√©es pour d√©tecter les changements
  bool _areDataListsEqual(List<Map<String, dynamic>> list1, List<Map<String, dynamic>> list2) {
    if (list1.length != list2.length) return false;
    if (list1.isEmpty && list2.isEmpty) return true;

    try {
      // Comparaison rapide bas√©e sur la taille et les premiers/derniers √©l√©ments
      if (list1.length != list2.length) return false;
      if (list1.isNotEmpty && list2.isNotEmpty) {
        return json.encode(list1.first) == json.encode(list2.first) &&
            json.encode(list1.last) == json.encode(list2.last);
      }
      return true;
    } catch (e) {
      // En cas d'erreur de comparaison, consid√©rer comme diff√©rent
      return false;
    }
  }

  /// M√©thode pour obtenir des donn√©es du cache uniquement
  List<Map<String, dynamic>> getCachedData(String cacheKey, {String? alternativeCacheKey}) {
    try {
      String? cachedJson = _box.get(cacheKey);

      if (cachedJson == null && alternativeCacheKey != null) {
        cachedJson = _box.get(alternativeCacheKey);
      }

      if (cachedJson != null) {
        return List<Map<String, dynamic>>.from(json.decode(cachedJson));
      }
    } catch (e) {
      debugPrint("‚ö†Ô∏è Erreur lecture cache $cacheKey: $e");
    }
    return [];
  }

  /// M√©thode pour v√©rifier si le cache est valide
  bool isCacheValid(String cacheKey) {
    final lastFetchTime = _box.get('lastFetchTime_$cacheKey');
    if (lastFetchTime == null) return false;

    try {
      final DateTime lastFetch = DateTime.parse(lastFetchTime);
      return DateTime.now().difference(lastFetch) < Parameters.apiCacheDuration;
    } catch (e) {
      return false;
    }
  }

  /// M√©thode pour forcer l'invalidation du cache
  Future<void> invalidateCache(String cacheKey) async {
    await _box.delete('lastFetchTime_$cacheKey');
    debugPrint("üóëÔ∏è Cache $cacheKey invalid√©");
  }

  /// M√©thode pour nettoyer tout le cache
  Future<void> clearAllCache() async {
    await _box.clear();
    debugPrint("üóëÔ∏è Tout le cache effac√©");
  }
}
